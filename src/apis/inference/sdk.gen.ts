// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
	GetAuthMessageAuthMessagePostData,
	GetAuthMessageAuthMessagePostResponses,
	GetAuthMessageAuthMessagePostErrors,
	LoginWithWalletAuthLoginPostData,
	LoginWithWalletAuthLoginPostResponses,
	LoginWithWalletAuthLoginPostErrors,
	CheckAuthStatusAuthStatusGetData,
	CheckAuthStatusAuthStatusGetResponses,
	CheckAuthStatusAuthStatusGetErrors,
	ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostData,
	ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostResponses,
	ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostData,
	ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostResponses,
	ThirdwebWebhookCreditsThirdwebWebhookPostData,
	ThirdwebWebhookCreditsThirdwebWebhookPostResponses,
	ThirdwebWebhookCreditsThirdwebWebhookPostErrors,
	UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostData,
	UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponses,
	GetUserBalanceCreditsBalanceGetData,
	GetUserBalanceCreditsBalanceGetResponses,
	GetUserBalanceCreditsBalanceGetErrors,
	GetTransactionHistoryCreditsTransactionsGetData,
	GetTransactionHistoryCreditsTransactionsGetResponses,
	GetTransactionHistoryCreditsTransactionsGetErrors,
	GetVouchersCreditsVouchersGetData,
	GetVouchersCreditsVouchersGetResponses,
	GetVouchersCreditsVouchersGetErrors,
	AddVoucherCreditsCreditsVouchersPostData,
	AddVoucherCreditsCreditsVouchersPostResponses,
	AddVoucherCreditsCreditsVouchersPostErrors,
	ChangeVoucherExpirationCreditsVoucherExpirationPostData,
	ChangeVoucherExpirationCreditsVoucherExpirationPostResponses,
	ChangeVoucherExpirationCreditsVoucherExpirationPostErrors,
	GetApiKeysApiKeysGetData,
	GetApiKeysApiKeysGetResponses,
	GetApiKeysApiKeysGetErrors,
	CreateApiKeyApiKeysPostData,
	CreateApiKeyApiKeysPostResponses,
	CreateApiKeyApiKeysPostErrors,
	DeleteApiKeyApiKeysKeyIdDeleteData,
	DeleteApiKeyApiKeysKeyIdDeleteResponses,
	DeleteApiKeyApiKeysKeyIdDeleteErrors,
	UpdateApiKeyApiKeysKeyIdPutData,
	UpdateApiKeyApiKeysKeyIdPutResponses,
	UpdateApiKeyApiKeysKeyIdPutErrors,
	RegisterInferenceCallApiKeysAdminUsagePostData,
	RegisterInferenceCallApiKeysAdminUsagePostResponses,
	RegisterInferenceCallApiKeysAdminUsagePostErrors,
	GetAdminAllApiKeysApiKeysAdminListGetData,
	GetAdminAllApiKeysApiKeysAdminListGetResponses,
	GetAdminAllApiKeysApiKeysAdminListGetErrors,
	GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetData,
	GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetResponses,
	GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetErrors,
	GetSubscriptionByUserAddressSubscriptionsGetData,
	GetSubscriptionByUserAddressSubscriptionsGetResponses,
	GetSubscriptionByUserAddressSubscriptionsGetErrors,
	CancelSubscriptionSubscriptionsSubscriptionIdDeleteData,
	CancelSubscriptionSubscriptionsSubscriptionIdDeleteResponses,
	CancelSubscriptionSubscriptionsSubscriptionIdDeleteErrors,
	ListAgentsAgentsGetData,
	ListAgentsAgentsGetResponses,
	ListAgentsAgentsGetErrors,
	CreateAgentAgentsPostData,
	CreateAgentAgentsPostResponses,
	CreateAgentAgentsPostErrors,
	GetAgentPublicInfoAgentsAgentIdGetData,
	GetAgentPublicInfoAgentsAgentIdGetResponses,
	GetAgentPublicInfoAgentsAgentIdGetErrors,
	ReallocateAgentAgentsAgentIdReallocatePostData,
	ReallocateAgentAgentsAgentIdReallocatePostResponses,
	ReallocateAgentAgentsAgentIdReallocatePostErrors,
	GetDashboardStatsStatsDashboardGetData,
	GetDashboardStatsStatsDashboardGetResponses,
	GetDashboardStatsStatsDashboardGetErrors,
	GetUsageStatsStatsUsageGetData,
	GetUsageStatsStatsUsageGetResponses,
	GetUsageStatsStatsUsageGetErrors,
	GetCreditsStatsStatsGlobalCreditsGetData,
	GetCreditsStatsStatsGlobalCreditsGetResponses,
	GetCreditsStatsStatsGlobalCreditsGetErrors,
	GetApiStatsStatsGlobalApiGetData,
	GetApiStatsStatsGlobalApiGetResponses,
	GetApiStatsStatsGlobalApiGetErrors,
	GetAgentStatsStatsGlobalAgentsGetData,
	GetAgentStatsStatsGlobalAgentsGetResponses,
	GetAgentStatsStatsGlobalAgentsGetErrors,
	GetTokensStatsStatsGlobalTokensGetData,
	GetTokensStatsStatsGlobalTokensGetResponses,
	GetTokensStatsStatsGlobalTokensGetErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
	TData,
	ThrowOnError
> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Get Auth Message
 * Get the static message for wallet signature authentication.
 */
export const getAuthMessageAuthMessagePost = <ThrowOnError extends boolean = false>(
	options: Options<GetAuthMessageAuthMessagePostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		GetAuthMessageAuthMessagePostResponses,
		GetAuthMessageAuthMessagePostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/auth/message",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Login With Wallet
 * Authenticate with a wallet signature.
 */
export const loginWithWalletAuthLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginWithWalletAuthLoginPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		LoginWithWalletAuthLoginPostResponses,
		LoginWithWalletAuthLoginPostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/auth/login",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Check Auth Status
 * Check if the user is authenticated with a valid token.
 */
export const checkAuthStatusAuthStatusGet = <ThrowOnError extends boolean = false>(
	options?: Options<CheckAuthStatusAuthStatusGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		CheckAuthStatusAuthStatusGetResponses,
		CheckAuthStatusAuthStatusGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/auth/status",
		...options,
	});
};

/**
 * Process Base Ltai Transactions
 * Process credit purchase with $LTAI transactions in Base
 */
export const processBaseLtaiTransactionsCreditsLtaiBaseProcessPost = <ThrowOnError extends boolean = false>(
	options?: Options<ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostResponses,
		unknown,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/ltai/base/process",
		...options,
	});
};

/**
 * Process Solana Ltai Transactions
 * Process credit purchase with $LTAI in solana blockchain
 */
export const processSolanaLtaiTransactionsCreditsLtaiSolanaProcessPost = <ThrowOnError extends boolean = false>(
	options?: Options<ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostResponses,
		unknown,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/ltai/solana/process",
		...options,
	});
};

/**
 * Thirdweb Webhook
 * Receive webhooks from Thirdweb
 */
export const thirdwebWebhookCreditsThirdwebWebhookPost = <ThrowOnError extends boolean = false>(
	options: Options<ThirdwebWebhookCreditsThirdwebWebhookPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		ThirdwebWebhookCreditsThirdwebWebhookPostResponses,
		ThirdwebWebhookCreditsThirdwebWebhookPostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/thirdweb/webhook",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Update Expired Credit Transactions
 * Deactivate credits with a past expiration date.
 */
export const updateExpiredCreditTransactionsCreditsUpdateExpiredPost = <ThrowOnError extends boolean = false>(
	options?: Options<UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).post<
		UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponses,
		unknown,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/update-expired",
		...options,
	});
};

/**
 * Get User Balance
 * Get the current credit balance for authenticated user.
 */
export const getUserBalanceCreditsBalanceGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetUserBalanceCreditsBalanceGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetUserBalanceCreditsBalanceGetResponses,
		GetUserBalanceCreditsBalanceGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/balance",
		...options,
	});
};

/**
 * Get Transaction History
 * Get transaction history for authenticated user
 */
export const getTransactionHistoryCreditsTransactionsGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetTransactionHistoryCreditsTransactionsGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetTransactionHistoryCreditsTransactionsGetResponses,
		GetTransactionHistoryCreditsTransactionsGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/transactions",
		...options,
	});
};

/**
 * Get Vouchers
 * Get all vouchers for a specific address
 */
export const getVouchersCreditsVouchersGet = <ThrowOnError extends boolean = false>(
	options: Options<GetVouchersCreditsVouchersGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetVouchersCreditsVouchersGetResponses,
		GetVouchersCreditsVouchersGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/vouchers",
		...options,
	});
};

/**
 * Add Voucher Credits
 * Add credits via voucher to a specific address
 */
export const addVoucherCreditsCreditsVouchersPost = <ThrowOnError extends boolean = false>(
	options: Options<AddVoucherCreditsCreditsVouchersPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		AddVoucherCreditsCreditsVouchersPostResponses,
		AddVoucherCreditsCreditsVouchersPostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/vouchers",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Change Voucher Expiration
 * Change a voucher's expiration date
 */
export const changeVoucherExpirationCreditsVoucherExpirationPost = <ThrowOnError extends boolean = false>(
	options: Options<ChangeVoucherExpirationCreditsVoucherExpirationPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		ChangeVoucherExpirationCreditsVoucherExpirationPostResponses,
		ChangeVoucherExpirationCreditsVoucherExpirationPostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/credits/voucher/expiration",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Get Api Keys
 * Get all API keys for a user.
 */
export const getApiKeysApiKeysGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetApiKeysApiKeysGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetApiKeysApiKeysGetResponses,
		GetApiKeysApiKeysGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api-keys",
		...options,
	});
};

/**
 * Create Api Key
 * Create a new API key for a user.
 */
export const createApiKeyApiKeysPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateApiKeyApiKeysPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateApiKeyApiKeysPostResponses,
		CreateApiKeyApiKeysPostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api-keys",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Delete Api Key
 * Delete an API key.
 */
export const deleteApiKeyApiKeysKeyIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteApiKeyApiKeysKeyIdDeleteData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteApiKeyApiKeysKeyIdDeleteResponses,
		DeleteApiKeyApiKeysKeyIdDeleteErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api-keys/{key_id}",
		...options,
	});
};

/**
 * Update Api Key
 * Update an API key.
 */
export const updateApiKeyApiKeysKeyIdPut = <ThrowOnError extends boolean = false>(
	options: Options<UpdateApiKeyApiKeysKeyIdPutData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		UpdateApiKeyApiKeysKeyIdPutResponses,
		UpdateApiKeyApiKeysKeyIdPutErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api-keys/{key_id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Register Inference Call
 * Log API key usage.
 *
 * This endpoint is protected by admin authorization and requires
 * the X-Admin-Token header to match the ADMIN_SECRET environment variable.
 */
export const registerInferenceCallApiKeysAdminUsagePost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterInferenceCallApiKeysAdminUsagePostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterInferenceCallApiKeysAdminUsagePostResponses,
		RegisterInferenceCallApiKeysAdminUsagePostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api-keys/admin/usage",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Get Admin All Api Keys
 * Get all API keys across all addresses.
 *
 * This endpoint is protected by admin authorization and requires
 * the X-Admin-Token header to match the ADMIN_SECRET environment variable.
 */
export const getAdminAllApiKeysApiKeysAdminListGet = <ThrowOnError extends boolean = false>(
	options: Options<GetAdminAllApiKeysApiKeysAdminListGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetAdminAllApiKeysApiKeysAdminListGetResponses,
		GetAdminAllApiKeysApiKeysAdminListGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/api-keys/admin/list",
		...options,
	});
};

/**
 * Get Subscription Transactions
 * Get subscription transactions
 */
export const getSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGet = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetResponses,
		GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/subscriptions/{subscription_id}/transactions",
		...options,
	});
};

/**
 * Get Subscription By User Address
 * Get subscriptions for the logged in user
 */
export const getSubscriptionByUserAddressSubscriptionsGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetSubscriptionByUserAddressSubscriptionsGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetSubscriptionByUserAddressSubscriptionsGetResponses,
		GetSubscriptionByUserAddressSubscriptionsGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/subscriptions",
		...options,
	});
};

/**
 * Cancel Subscription
 * Cancel a subscription
 */
export const cancelSubscriptionSubscriptionsSubscriptionIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<CancelSubscriptionSubscriptionsSubscriptionIdDeleteData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		CancelSubscriptionSubscriptionsSubscriptionIdDeleteResponses,
		CancelSubscriptionSubscriptionsSubscriptionIdDeleteErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/subscriptions/{subscription_id}",
		...options,
	});
};

/**
 * List Agents
 * List all agents for the current user
 */
export const listAgentsAgentsGet = <ThrowOnError extends boolean = false>(
	options?: Options<ListAgentsAgentsGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<ListAgentsAgentsGetResponses, ListAgentsAgentsGetErrors, ThrowOnError>({
		responseType: "json",
		url: "/agents/",
		...options,
	});
};

/**
 * Create Agent
 * Create a new agent
 */
export const createAgentAgentsPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateAgentAgentsPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateAgentAgentsPostResponses,
		CreateAgentAgentsPostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/agents/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Get Agent Public Info
 * Get an agent's public information
 */
export const getAgentPublicInfoAgentsAgentIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetAgentPublicInfoAgentsAgentIdGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetAgentPublicInfoAgentsAgentIdGetResponses,
		GetAgentPublicInfoAgentsAgentIdGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/agents/{agent_id}",
		...options,
	});
};

/**
 * Reallocate Agent
 * Reallocate an agent instance
 */
export const reallocateAgentAgentsAgentIdReallocatePost = <ThrowOnError extends boolean = false>(
	options: Options<ReallocateAgentAgentsAgentIdReallocatePostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		ReallocateAgentAgentsAgentIdReallocatePostResponses,
		ReallocateAgentAgentsAgentIdReallocatePostErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/agents/{agent_id}/reallocate",
		...options,
	});
};

/**
 * Get Dashboard Stats
 * Get dashboard statistics for the authenticated user:
 * - Credits used per month for the last 6 months
 * - Number of inference calls made this month
 * - Tokens used this month (input, output, and total)
 */
export const getDashboardStatsStatsDashboardGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetDashboardStatsStatsDashboardGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		GetDashboardStatsStatsDashboardGetResponses,
		GetDashboardStatsStatsDashboardGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/stats/dashboard",
		...options,
	});
};

/**
 * Get Usage Stats
 * Get detailed usage statistics for a specific date range.
 *
 * Statistics include:
 * - Total number of inference calls
 * - Total tokens (input and output)
 * - Total cost
 * - Daily breakdown of token usage
 * - Usage breakdown by model
 * - Usage breakdown by API key
 */
export const getUsageStatsStatsUsageGet = <ThrowOnError extends boolean = false>(
	options: Options<GetUsageStatsStatsUsageGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetUsageStatsStatsUsageGetResponses,
		GetUsageStatsStatsUsageGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/stats/usage",
		...options,
	});
};

/**
 * Get Credits Stats
 * Get detailed credits statistics and models usage for a specific date range.
 *
 * Statistics include:
 * - Credits used per model
 * - Tokens used per model
 * - Which model has been used
 */
export const getCreditsStatsStatsGlobalCreditsGet = <ThrowOnError extends boolean = false>(
	options: Options<GetCreditsStatsStatsGlobalCreditsGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetCreditsStatsStatsGlobalCreditsGetResponses,
		GetCreditsStatsStatsGlobalCreditsGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/stats/global/credits",
		...options,
	});
};

/**
 * Get Api Stats
 * Get detailed api statistics and models usage for a specific date range.
 *
 * Statistics include:
 * - Total API calls for the entire models
 * - List with API calls for each model
 */
export const getApiStatsStatsGlobalApiGet = <ThrowOnError extends boolean = false>(
	options: Options<GetApiStatsStatsGlobalApiGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetApiStatsStatsGlobalApiGetResponses,
		GetApiStatsStatsGlobalApiGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/stats/global/api",
		...options,
	});
};

/**
 * Get Agent Stats
 * Get detailed agent usage statistics for a specific date range.
 *
 * Statistics include:
 * - Total agents created
 * - Total given vouchers
 * - Total subscriptions to the agents
 * - List with the agents creations dates
 */
export const getAgentStatsStatsGlobalAgentsGet = <ThrowOnError extends boolean = false>(
	options: Options<GetAgentStatsStatsGlobalAgentsGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetAgentStatsStatsGlobalAgentsGetResponses,
		GetAgentStatsStatsGlobalAgentsGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/stats/global/agents",
		...options,
	});
};

/**
 * Get Tokens Stats
 * Get detailed tokens usage statistics for a specific date range.
 *
 * Statistics include:
 * - Total user input tokens
 * - Total model output vouchers
 * - Total subscriptions to the agents
 * - List with the agents creations dates
 */
export const getTokensStatsStatsGlobalTokensGet = <ThrowOnError extends boolean = false>(
	options: Options<GetTokensStatsStatsGlobalTokensGetData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		GetTokensStatsStatsGlobalTokensGetResponses,
		GetTokensStatsStatsGlobalTokensGetErrors,
		ThrowOnError
	>({
		responseType: "json",
		url: "/stats/global/tokens",
		...options,
	});
};
