// This file is auto-generated by @hey-api/openapi-ts

/**
 * AgentResponse
 */
export type AgentResponse = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Instance Hash
	 */
	instance_hash: string | null;
	/**
	 * Name
	 */
	name: string;
	/**
	 * User Address
	 */
	user_address: string;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Monthly Cost
	 */
	monthly_cost: number;
	/**
	 * Paid Until
	 */
	paid_until: string;
	/**
	 * Renew History
	 */
	renew_history: Array<{
		[key: string]: unknown;
	}>;
	subscription_status: SubscriptionStatus;
	/**
	 * Subscription Id
	 */
	subscription_id?: string | null;
};

/**
 * AgentUsage
 */
export type AgentUsage = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Created At
	 */
	created_at: string;
};

/**
 * ApiKey
 */
export type ApiKey = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Key
	 */
	key: string;
	/**
	 * Name
	 */
	name: string;
	/**
	 * User Address
	 */
	user_address: string;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Is Active
	 */
	is_active: boolean;
	/**
	 * Monthly Limit
	 */
	monthly_limit?: number | null;
};

/**
 * ApiKeyAdminListResponse
 */
export type ApiKeyAdminListResponse = {
	/**
	 * Keys
	 */
	keys: Array<string>;
};

/**
 * ApiKeyCreate
 */
export type ApiKeyCreate = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Monthly Limit
	 */
	monthly_limit?: number | null;
};

/**
 * ApiKeyListResponse
 */
export type ApiKeyListResponse = {
	/**
	 * Keys
	 */
	keys: Array<ApiKey>;
};

/**
 * ApiKeyUpdate
 */
export type ApiKeyUpdate = {
	/**
	 * Name
	 */
	name?: string | null;
	/**
	 * Is Active
	 */
	is_active?: boolean | null;
	/**
	 * Monthly Limit
	 */
	monthly_limit?: number | null;
};

/**
 * AuthLoginRequest
 */
export type AuthLoginRequest = {
	chain: LibertaiChain;
	/**
	 * Address
	 */
	address: string;
	/**
	 * Signature
	 */
	signature: string;
};

/**
 * AuthLoginResponse
 */
export type AuthLoginResponse = {
	/**
	 * Access Token
	 */
	access_token: string;
	/**
	 * Token Type
	 */
	token_type?: string;
	/**
	 * Address
	 */
	address: string;
};

/**
 * AuthMessageRequest
 */
export type AuthMessageRequest = {
	chain: LibertaiChain;
	/**
	 * Address
	 */
	address: string;
};

/**
 * AuthMessageResponse
 */
export type AuthMessageResponse = {
	/**
	 * Message
	 */
	message: string;
};

/**
 * AuthStatusResponse
 */
export type AuthStatusResponse = {
	/**
	 * Authenticated
	 */
	authenticated: boolean;
	/**
	 * Address
	 */
	address?: string | null;
};

/**
 * Call
 */
export type Call = {
	/**
	 * Date
	 */
	date: string;
	/**
	 * Nb Input Tokens
	 */
	nb_input_tokens: number;
	/**
	 * Nb Output Tokens
	 */
	nb_output_tokens: number;
	/**
	 * Model Name
	 */
	model_name: string;
};

/**
 * CreateAgentRequest
 */
export type CreateAgentRequest = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Ssh Public Key
	 */
	ssh_public_key: string;
	/**
	 * Subscription Months
	 */
	subscription_months?: number;
};

/**
 * CreditBalanceResponse
 */
export type CreditBalanceResponse = {
	/**
	 * Address
	 */
	address: string;
	/**
	 * Balance
	 */
	balance: number;
};

/**
 * CreditTransactionProvider
 */
export type CreditTransactionProvider = "ltai_base" | "ltai_solana" | "thirdweb" | "voucher" | "sol_solana";

/**
 * CreditTransactionResponse
 */
export type CreditTransactionResponse = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Transaction Hash
	 */
	transaction_hash: string | null;
	/**
	 * Amount
	 */
	amount: number;
	/**
	 * Amount Left
	 */
	amount_left: number;
	provider: CreditTransactionProvider;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Expired At
	 */
	expired_at: string | null;
	/**
	 * Is Active
	 */
	is_active: boolean;
	status: CreditTransactionStatus;
};

/**
 * CreditTransactionStatus
 */
export type CreditTransactionStatus = "pending" | "completed" | "error";

/**
 * CreditTransactionsResponse
 */
export type CreditTransactionsResponse = {
	/**
	 * Address
	 */
	address: string;
	/**
	 * Transactions
	 */
	transactions: Array<CreditTransactionResponse>;
};

/**
 * CreditsUsage
 */
export type CreditsUsage = {
	/**
	 * Credits Used
	 */
	credits_used: number;
	/**
	 * Used At
	 */
	used_at: string;
	/**
	 * Model Name
	 */
	model_name: string;
};

/**
 * DailyTokens
 * Input and output tokens for a single day.
 */
export type DailyTokens = {
	/**
	 * Input Tokens
	 */
	input_tokens: number;
	/**
	 * Output Tokens
	 */
	output_tokens: number;
};

/**
 * DashboardStats
 * Dashboard statistics for a user.
 */
export type DashboardStats = {
	/**
	 * Address
	 */
	address: string;
	/**
	 * Monthly Usage
	 */
	monthly_usage: {
		[key: string]: number;
	};
	current_month: TokenStats;
};

/**
 * ExpiredCreditTransaction
 */
export type ExpiredCreditTransaction = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Transaction Hash
	 */
	transaction_hash: string | null;
	/**
	 * Address
	 */
	address: string;
	/**
	 * Expired At
	 */
	expired_at: string | null;
};

/**
 * ExpiredCreditTransactionsResponse
 */
export type ExpiredCreditTransactionsResponse = {
	/**
	 * Updated Count
	 */
	updated_count: number;
	/**
	 * Transactions
	 */
	transactions: Array<ExpiredCreditTransaction>;
};

/**
 * FullApiKey
 */
export type FullApiKey = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Key
	 */
	key: string;
	/**
	 * Name
	 */
	name: string;
	/**
	 * User Address
	 */
	user_address: string;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Is Active
	 */
	is_active: boolean;
	/**
	 * Monthly Limit
	 */
	monthly_limit?: number | null;
	/**
	 * Full Key
	 */
	full_key: string;
};

/**
 * GetAgentResponse
 */
export type GetAgentResponse = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Instance Hash
	 */
	instance_hash: string | null;
	/**
	 * Name
	 */
	name: string;
	/**
	 * User Address
	 */
	user_address: string;
	/**
	 * Monthly Cost
	 */
	monthly_cost: number;
	/**
	 * Paid Until
	 */
	paid_until: string;
	/**
	 * Instance Ip
	 */
	instance_ip?: string | null;
	subscription_status: SubscriptionStatus;
	/**
	 * Subscription Id
	 */
	subscription_id?: string | null;
};

/**
 * GlobalAgentStats
 * Agent usage statistics for a date range.
 */
export type GlobalAgentStats = {
	/**
	 * Total Agents Created
	 */
	total_agents_created: number;
	/**
	 * Total Vouchers
	 */
	total_vouchers: number;
	/**
	 * Total Subscriptions
	 */
	total_subscriptions: number;
	/**
	 * Agents
	 */
	agents: Array<AgentUsage>;
};

/**
 * GlobalApiStats
 * Api usage statistics for a date range.
 */
export type GlobalApiStats = {
	/**
	 * Total Calls
	 */
	total_calls: number;
	/**
	 * Api Usage
	 */
	api_usage: Array<ModelApiUsage>;
};

/**
 * GlobalCreditsStats
 * Credit usage statistics for a date range.
 */
export type GlobalCreditsStats = {
	/**
	 * Total Credits Used
	 */
	total_credits_used: number;
	/**
	 * Credits Usage
	 */
	credits_usage: Array<CreditsUsage>;
};

/**
 * GlobalTokensStats
 */
export type GlobalTokensStats = {
	/**
	 * Total Input Tokens
	 */
	total_input_tokens: number;
	/**
	 * Total Output Tokens
	 */
	total_output_tokens: number;
	/**
	 * Calls
	 */
	calls: Array<Call>;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
	/**
	 * Detail
	 */
	detail?: Array<ValidationError>;
};

/**
 * InferenceCallData
 */
export type InferenceCallData = {
	/**
	 * Key
	 */
	key: string;
	/**
	 * Input Tokens
	 */
	input_tokens: number;
	/**
	 * Output Tokens
	 */
	output_tokens: number;
	/**
	 * Cached Tokens
	 */
	cached_tokens?: number;
	/**
	 * Model Name
	 */
	model_name: string;
};

/**
 * LibertaiChain
 */
export type LibertaiChain = "base" | "solana";

/**
 * ModelApiUsage
 */
export type ModelApiUsage = {
	/**
	 * Model Name
	 */
	model_name: string;
	/**
	 * Used At
	 */
	used_at: string;
};

/**
 * SubscriptionResponse
 */
export type SubscriptionResponse = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * User Address
	 */
	user_address: string;
	subscription_type: SubscriptionType;
	/**
	 * Amount
	 */
	amount: number;
	/**
	 * Last Charged At
	 */
	last_charged_at: string;
	/**
	 * Next Charge At
	 */
	next_charge_at: string;
	status: SubscriptionStatus;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Related Id
	 */
	related_id: string;
};

/**
 * SubscriptionStatus
 */
export type SubscriptionStatus = "active" | "cancelled" | "inactive";

/**
 * SubscriptionTransactionResponse
 */
export type SubscriptionTransactionResponse = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Subscription Id
	 */
	subscription_id: string;
	/**
	 * Amount
	 */
	amount: number;
	status: SubscriptionTransactionStatus;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Notes
	 */
	notes?: string | null;
};

/**
 * SubscriptionTransactionStatus
 */
export type SubscriptionTransactionStatus = "success" | "failed";

/**
 * SubscriptionType
 */
export type SubscriptionType = "agent";

/**
 * ThirdwebOnchainTransactionData
 */
export type ThirdwebOnchainTransactionData = {
	/**
	 * Transactionid
	 */
	transactionId: string;
	/**
	 * Paymentid
	 */
	paymentId: string;
	/**
	 * Clientid
	 */
	clientId: string;
	/**
	 * Action
	 */
	action: "BUY" | "SELL";
	/**
	 * Status
	 */
	status: "COMPLETED" | "PENDING";
	originToken: ThirdwebToken;
	/**
	 * Originamount
	 */
	originAmount: string;
	destinationToken: ThirdwebToken;
	/**
	 * Destinationamount
	 */
	destinationAmount: string;
	/**
	 * Sender
	 */
	sender: string;
	/**
	 * Receiver
	 */
	receiver: string;
	/**
	 * Type
	 */
	type: string;
	/**
	 * Transactions
	 */
	transactions: Array<ThirdwebTransactionReference>;
	purchaseData: ThirdwebPurchaseData;
};

/**
 * ThirdwebOnrampTransactionData
 */
export type ThirdwebOnrampTransactionData = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Onramp
	 */
	onramp: string;
	token: ThirdwebToken;
	/**
	 * Amount
	 */
	amount: string;
	/**
	 * Currency
	 */
	currency: string;
	/**
	 * Currencyamount
	 */
	currencyAmount: number;
	/**
	 * Receiver
	 */
	receiver: string;
	/**
	 * Status
	 */
	status: "PENDING" | "COMPLETED";
	purchaseData: ThirdwebPurchaseData;
};

/**
 * ThirdwebPurchaseData
 */
export type ThirdwebPurchaseData = {
	/**
	 * Useraddress
	 */
	userAddress: string;
};

/**
 * ThirdwebToken
 */
export type ThirdwebToken = {
	/**
	 * Chainid
	 */
	chainId: number;
	/**
	 * Address
	 */
	address: string;
	/**
	 * Symbol
	 */
	symbol: string;
	/**
	 * Name
	 */
	name: string;
	/**
	 * Decimals
	 */
	decimals: number;
	/**
	 * Priceusd
	 */
	priceUsd: number;
	/**
	 * Iconuri
	 */
	iconUri: string;
};

/**
 * ThirdwebTransactionReference
 */
export type ThirdwebTransactionReference = {
	/**
	 * Chainid
	 */
	chainId: number;
	/**
	 * Transactionhash
	 */
	transactionHash: string;
};

/**
 * ThirdwebWebhookPayload
 */
export type ThirdwebWebhookPayload = {
	/**
	 * Version
	 */
	version: number;
	/**
	 * Type
	 */
	type: string;
	/**
	 * Data
	 */
	data: ThirdwebOnchainTransactionData | ThirdwebOnrampTransactionData;
};

/**
 * TokenStats
 * Stats about token usage for the current month.
 */
export type TokenStats = {
	/**
	 * Inference Calls
	 */
	inference_calls: number;
	/**
	 * Total Tokens
	 */
	total_tokens: number;
	/**
	 * Input Tokens
	 */
	input_tokens: number;
	/**
	 * Output Tokens
	 */
	output_tokens: number;
	/**
	 * Credits Used
	 */
	credits_used: number;
};

/**
 * UsageByEntity
 * Usage statistics grouped by model or API key.
 */
export type UsageByEntity = {
	/**
	 * Name
	 */
	name: string;
	/**
	 * Calls
	 */
	calls: number;
	/**
	 * Total Tokens
	 */
	total_tokens: number;
	/**
	 * Cost
	 */
	cost: number;
};

/**
 * UsageStats
 * Detailed usage statistics for a date range.
 */
export type UsageStats = {
	/**
	 * Inference Calls
	 */
	inference_calls: number;
	/**
	 * Input Tokens
	 */
	input_tokens: number;
	/**
	 * Output Tokens
	 */
	output_tokens: number;
	/**
	 * Total Tokens
	 */
	total_tokens: number;
	/**
	 * Cost
	 */
	cost: number;
	/**
	 * Daily Usage
	 */
	daily_usage: {
		[key: string]: DailyTokens;
	};
	/**
	 * Usage By Model
	 */
	usage_by_model: Array<UsageByEntity>;
	/**
	 * Usage By Api Key
	 */
	usage_by_api_key: Array<UsageByEntity>;
};

/**
 * ValidationError
 */
export type ValidationError = {
	/**
	 * Location
	 */
	loc: Array<string | number>;
	/**
	 * Message
	 */
	msg: string;
	/**
	 * Error Type
	 */
	type: string;
};

/**
 * VoucherAddCreditsRequest
 */
export type VoucherAddCreditsRequest = {
	chain: LibertaiChain;
	/**
	 * Address
	 */
	address: string;
	/**
	 * Amount
	 */
	amount: number;
	/**
	 * Expired At
	 */
	expired_at?: string | null;
	/**
	 * Password
	 */
	password: string;
};

/**
 * VoucherChangeExpireRequest
 */
export type VoucherChangeExpireRequest = {
	/**
	 * Voucher Id
	 */
	voucher_id: string;
	/**
	 * Expired At
	 */
	expired_at: string | null;
	/**
	 * Password
	 */
	password: string;
};

/**
 * VoucherCreditsResponse
 */
export type VoucherCreditsResponse = {
	/**
	 * Id
	 */
	id: string;
	/**
	 * Address
	 */
	address: string;
	/**
	 * Amount
	 */
	amount: number;
	/**
	 * Amount Left
	 */
	amount_left: number;
	/**
	 * Expired At
	 */
	expired_at: string | null;
	/**
	 * Created At
	 */
	created_at: string;
	/**
	 * Is Active
	 */
	is_active: boolean;
};

export type GetAuthMessageAuthMessagePostData = {
	body: AuthMessageRequest;
	path?: never;
	query?: never;
	url: "/auth/message";
};

export type GetAuthMessageAuthMessagePostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetAuthMessageAuthMessagePostError =
	GetAuthMessageAuthMessagePostErrors[keyof GetAuthMessageAuthMessagePostErrors];

export type GetAuthMessageAuthMessagePostResponses = {
	/**
	 * Successful Response
	 */
	200: AuthMessageResponse;
};

export type GetAuthMessageAuthMessagePostResponse =
	GetAuthMessageAuthMessagePostResponses[keyof GetAuthMessageAuthMessagePostResponses];

export type LoginWithWalletAuthLoginPostData = {
	body: AuthLoginRequest;
	path?: never;
	query?: never;
	url: "/auth/login";
};

export type LoginWithWalletAuthLoginPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type LoginWithWalletAuthLoginPostError =
	LoginWithWalletAuthLoginPostErrors[keyof LoginWithWalletAuthLoginPostErrors];

export type LoginWithWalletAuthLoginPostResponses = {
	/**
	 * Successful Response
	 */
	200: AuthLoginResponse;
};

export type LoginWithWalletAuthLoginPostResponse =
	LoginWithWalletAuthLoginPostResponses[keyof LoginWithWalletAuthLoginPostResponses];

export type CheckAuthStatusAuthStatusGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/auth/status";
};

export type CheckAuthStatusAuthStatusGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CheckAuthStatusAuthStatusGetError =
	CheckAuthStatusAuthStatusGetErrors[keyof CheckAuthStatusAuthStatusGetErrors];

export type CheckAuthStatusAuthStatusGetResponses = {
	/**
	 * Successful Response
	 */
	200: AuthStatusResponse;
};

export type CheckAuthStatusAuthStatusGetResponse =
	CheckAuthStatusAuthStatusGetResponses[keyof CheckAuthStatusAuthStatusGetResponses];

export type ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/credits/ltai/base/process";
};

export type ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostResponses = {
	/**
	 * Response Process Base Ltai Transactions Credits Ltai Base Process Post
	 * Successful Response
	 */
	200: Array<string>;
};

export type ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostResponse =
	ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostResponses[keyof ProcessBaseLtaiTransactionsCreditsLtaiBaseProcessPostResponses];

export type ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/credits/ltai/solana/process";
};

export type ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostResponses = {
	/**
	 * Response Process Solana Ltai Transactions Credits Ltai Solana Process Post
	 * Successful Response
	 */
	200: Array<string>;
};

export type ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostResponse =
	ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostResponses[keyof ProcessSolanaLtaiTransactionsCreditsLtaiSolanaProcessPostResponses];

export type ThirdwebWebhookCreditsThirdwebWebhookPostData = {
	body: ThirdwebWebhookPayload;
	headers?: {
		/**
		 * X-Pay-Signature
		 */
		"X-Pay-Signature"?: string;
		/**
		 * X-Pay-Timestamp
		 */
		"X-Pay-Timestamp"?: string;
	};
	path?: never;
	query?: never;
	url: "/credits/thirdweb/webhook";
};

export type ThirdwebWebhookCreditsThirdwebWebhookPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ThirdwebWebhookCreditsThirdwebWebhookPostError =
	ThirdwebWebhookCreditsThirdwebWebhookPostErrors[keyof ThirdwebWebhookCreditsThirdwebWebhookPostErrors];

export type ThirdwebWebhookCreditsThirdwebWebhookPostResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/credits/update-expired";
};

export type UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponses = {
	/**
	 * Successful Response
	 */
	200: ExpiredCreditTransactionsResponse;
};

export type UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponse =
	UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponses[keyof UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponses];

export type GetUserBalanceCreditsBalanceGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/credits/balance";
};

export type GetUserBalanceCreditsBalanceGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetUserBalanceCreditsBalanceGetError =
	GetUserBalanceCreditsBalanceGetErrors[keyof GetUserBalanceCreditsBalanceGetErrors];

export type GetUserBalanceCreditsBalanceGetResponses = {
	/**
	 * Successful Response
	 */
	200: CreditBalanceResponse;
};

export type GetUserBalanceCreditsBalanceGetResponse =
	GetUserBalanceCreditsBalanceGetResponses[keyof GetUserBalanceCreditsBalanceGetResponses];

export type GetTransactionHistoryCreditsTransactionsGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/credits/transactions";
};

export type GetTransactionHistoryCreditsTransactionsGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetTransactionHistoryCreditsTransactionsGetError =
	GetTransactionHistoryCreditsTransactionsGetErrors[keyof GetTransactionHistoryCreditsTransactionsGetErrors];

export type GetTransactionHistoryCreditsTransactionsGetResponses = {
	/**
	 * Successful Response
	 */
	200: CreditTransactionsResponse;
};

export type GetTransactionHistoryCreditsTransactionsGetResponse =
	GetTransactionHistoryCreditsTransactionsGetResponses[keyof GetTransactionHistoryCreditsTransactionsGetResponses];

export type GetVouchersCreditsVouchersGetData = {
	body?: never;
	path?: never;
	query: {
		chain: LibertaiChain;
		/**
		 * Address
		 */
		address: string;
		/**
		 * Password
		 */
		password: string;
	};
	url: "/credits/vouchers";
};

export type GetVouchersCreditsVouchersGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetVouchersCreditsVouchersGetError =
	GetVouchersCreditsVouchersGetErrors[keyof GetVouchersCreditsVouchersGetErrors];

export type GetVouchersCreditsVouchersGetResponses = {
	/**
	 * Response Get Vouchers Credits Vouchers Get
	 * Successful Response
	 */
	200: Array<VoucherCreditsResponse>;
};

export type GetVouchersCreditsVouchersGetResponse =
	GetVouchersCreditsVouchersGetResponses[keyof GetVouchersCreditsVouchersGetResponses];

export type AddVoucherCreditsCreditsVouchersPostData = {
	body: VoucherAddCreditsRequest;
	path?: never;
	query?: never;
	url: "/credits/vouchers";
};

export type AddVoucherCreditsCreditsVouchersPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type AddVoucherCreditsCreditsVouchersPostError =
	AddVoucherCreditsCreditsVouchersPostErrors[keyof AddVoucherCreditsCreditsVouchersPostErrors];

export type AddVoucherCreditsCreditsVouchersPostResponses = {
	/**
	 * Response Add Voucher Credits Credits Vouchers Post
	 * Successful Response
	 */
	200: boolean;
};

export type AddVoucherCreditsCreditsVouchersPostResponse =
	AddVoucherCreditsCreditsVouchersPostResponses[keyof AddVoucherCreditsCreditsVouchersPostResponses];

export type ChangeVoucherExpirationCreditsVoucherExpirationPostData = {
	body: VoucherChangeExpireRequest;
	path?: never;
	query?: never;
	url: "/credits/voucher/expiration";
};

export type ChangeVoucherExpirationCreditsVoucherExpirationPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ChangeVoucherExpirationCreditsVoucherExpirationPostError =
	ChangeVoucherExpirationCreditsVoucherExpirationPostErrors[keyof ChangeVoucherExpirationCreditsVoucherExpirationPostErrors];

export type ChangeVoucherExpirationCreditsVoucherExpirationPostResponses = {
	/**
	 * Response Change Voucher Expiration Credits Voucher Expiration Post
	 * Successful Response
	 */
	200: boolean;
};

export type ChangeVoucherExpirationCreditsVoucherExpirationPostResponse =
	ChangeVoucherExpirationCreditsVoucherExpirationPostResponses[keyof ChangeVoucherExpirationCreditsVoucherExpirationPostResponses];

export type GetApiKeysApiKeysGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api-keys";
};

export type GetApiKeysApiKeysGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetApiKeysApiKeysGetError = GetApiKeysApiKeysGetErrors[keyof GetApiKeysApiKeysGetErrors];

export type GetApiKeysApiKeysGetResponses = {
	/**
	 * Successful Response
	 */
	200: ApiKeyListResponse;
};

export type GetApiKeysApiKeysGetResponse = GetApiKeysApiKeysGetResponses[keyof GetApiKeysApiKeysGetResponses];

export type CreateApiKeyApiKeysPostData = {
	body: ApiKeyCreate;
	path?: never;
	query?: never;
	url: "/api-keys";
};

export type CreateApiKeyApiKeysPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateApiKeyApiKeysPostError = CreateApiKeyApiKeysPostErrors[keyof CreateApiKeyApiKeysPostErrors];

export type CreateApiKeyApiKeysPostResponses = {
	/**
	 * Successful Response
	 */
	200: FullApiKey;
};

export type CreateApiKeyApiKeysPostResponse = CreateApiKeyApiKeysPostResponses[keyof CreateApiKeyApiKeysPostResponses];

export type DeleteApiKeyApiKeysKeyIdDeleteData = {
	body?: never;
	path: {
		/**
		 * Key Id
		 */
		key_id: string;
	};
	query?: never;
	url: "/api-keys/{key_id}";
};

export type DeleteApiKeyApiKeysKeyIdDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DeleteApiKeyApiKeysKeyIdDeleteError =
	DeleteApiKeyApiKeysKeyIdDeleteErrors[keyof DeleteApiKeyApiKeysKeyIdDeleteErrors];

export type DeleteApiKeyApiKeysKeyIdDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type UpdateApiKeyApiKeysKeyIdPutData = {
	body: ApiKeyUpdate;
	path: {
		/**
		 * Key Id
		 */
		key_id: string;
	};
	query?: never;
	url: "/api-keys/{key_id}";
};

export type UpdateApiKeyApiKeysKeyIdPutErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UpdateApiKeyApiKeysKeyIdPutError =
	UpdateApiKeyApiKeysKeyIdPutErrors[keyof UpdateApiKeyApiKeysKeyIdPutErrors];

export type UpdateApiKeyApiKeysKeyIdPutResponses = {
	/**
	 * Successful Response
	 */
	200: ApiKey;
};

export type UpdateApiKeyApiKeysKeyIdPutResponse =
	UpdateApiKeyApiKeysKeyIdPutResponses[keyof UpdateApiKeyApiKeysKeyIdPutResponses];

export type RegisterInferenceCallApiKeysAdminUsagePostData = {
	body: InferenceCallData;
	path?: never;
	query?: never;
	url: "/api-keys/admin/usage";
};

export type RegisterInferenceCallApiKeysAdminUsagePostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type RegisterInferenceCallApiKeysAdminUsagePostError =
	RegisterInferenceCallApiKeysAdminUsagePostErrors[keyof RegisterInferenceCallApiKeysAdminUsagePostErrors];

export type RegisterInferenceCallApiKeysAdminUsagePostResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type GetAdminAllApiKeysApiKeysAdminListGetData = {
	body?: never;
	headers: {
		/**
		 * X-Admin-Token
		 */
		"x-admin-token": string;
	};
	path?: never;
	query?: never;
	url: "/api-keys/admin/list";
};

export type GetAdminAllApiKeysApiKeysAdminListGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetAdminAllApiKeysApiKeysAdminListGetError =
	GetAdminAllApiKeysApiKeysAdminListGetErrors[keyof GetAdminAllApiKeysApiKeysAdminListGetErrors];

export type GetAdminAllApiKeysApiKeysAdminListGetResponses = {
	/**
	 * Successful Response
	 */
	200: ApiKeyAdminListResponse;
};

export type GetAdminAllApiKeysApiKeysAdminListGetResponse =
	GetAdminAllApiKeysApiKeysAdminListGetResponses[keyof GetAdminAllApiKeysApiKeysAdminListGetResponses];

export type GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetData = {
	body?: never;
	path: {
		/**
		 * Subscription Id
		 */
		subscription_id: string;
	};
	query?: never;
	url: "/subscriptions/{subscription_id}/transactions";
};

export type GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetError =
	GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetErrors[keyof GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetErrors];

export type GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetResponses = {
	/**
	 * Response Get Subscription Transactions Subscriptions  Subscription Id  Transactions Get
	 * Successful Response
	 */
	200: Array<SubscriptionTransactionResponse>;
};

export type GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetResponse =
	GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetResponses[keyof GetSubscriptionTransactionsSubscriptionsSubscriptionIdTransactionsGetResponses];

export type GetSubscriptionByUserAddressSubscriptionsGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/subscriptions";
};

export type GetSubscriptionByUserAddressSubscriptionsGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetSubscriptionByUserAddressSubscriptionsGetError =
	GetSubscriptionByUserAddressSubscriptionsGetErrors[keyof GetSubscriptionByUserAddressSubscriptionsGetErrors];

export type GetSubscriptionByUserAddressSubscriptionsGetResponses = {
	/**
	 * Response Get Subscription By User Address Subscriptions Get
	 * Successful Response
	 */
	200: Array<SubscriptionResponse>;
};

export type GetSubscriptionByUserAddressSubscriptionsGetResponse =
	GetSubscriptionByUserAddressSubscriptionsGetResponses[keyof GetSubscriptionByUserAddressSubscriptionsGetResponses];

export type CancelSubscriptionSubscriptionsSubscriptionIdDeleteData = {
	body?: never;
	path: {
		/**
		 * Subscription Id
		 */
		subscription_id: string;
	};
	query?: never;
	url: "/subscriptions/{subscription_id}";
};

export type CancelSubscriptionSubscriptionsSubscriptionIdDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CancelSubscriptionSubscriptionsSubscriptionIdDeleteError =
	CancelSubscriptionSubscriptionsSubscriptionIdDeleteErrors[keyof CancelSubscriptionSubscriptionsSubscriptionIdDeleteErrors];

export type CancelSubscriptionSubscriptionsSubscriptionIdDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type ListAgentsAgentsGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/agents/";
};

export type ListAgentsAgentsGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ListAgentsAgentsGetError = ListAgentsAgentsGetErrors[keyof ListAgentsAgentsGetErrors];

export type ListAgentsAgentsGetResponses = {
	/**
	 * Response List Agents Agents  Get
	 * Successful Response
	 */
	200: Array<GetAgentResponse>;
};

export type ListAgentsAgentsGetResponse = ListAgentsAgentsGetResponses[keyof ListAgentsAgentsGetResponses];

export type CreateAgentAgentsPostData = {
	body: CreateAgentRequest;
	path?: never;
	query?: never;
	url: "/agents/";
};

export type CreateAgentAgentsPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateAgentAgentsPostError = CreateAgentAgentsPostErrors[keyof CreateAgentAgentsPostErrors];

export type CreateAgentAgentsPostResponses = {
	/**
	 * Successful Response
	 */
	200: AgentResponse;
};

export type CreateAgentAgentsPostResponse = CreateAgentAgentsPostResponses[keyof CreateAgentAgentsPostResponses];

export type GetAgentPublicInfoAgentsAgentIdGetData = {
	body?: never;
	path: {
		/**
		 * Agent Id
		 */
		agent_id: string;
	};
	query?: never;
	url: "/agents/{agent_id}";
};

export type GetAgentPublicInfoAgentsAgentIdGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetAgentPublicInfoAgentsAgentIdGetError =
	GetAgentPublicInfoAgentsAgentIdGetErrors[keyof GetAgentPublicInfoAgentsAgentIdGetErrors];

export type GetAgentPublicInfoAgentsAgentIdGetResponses = {
	/**
	 * Successful Response
	 */
	200: GetAgentResponse;
};

export type GetAgentPublicInfoAgentsAgentIdGetResponse =
	GetAgentPublicInfoAgentsAgentIdGetResponses[keyof GetAgentPublicInfoAgentsAgentIdGetResponses];

export type ReallocateAgentAgentsAgentIdReallocatePostData = {
	body?: never;
	path: {
		/**
		 * Agent Id
		 */
		agent_id: string;
	};
	query?: never;
	url: "/agents/{agent_id}/reallocate";
};

export type ReallocateAgentAgentsAgentIdReallocatePostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ReallocateAgentAgentsAgentIdReallocatePostError =
	ReallocateAgentAgentsAgentIdReallocatePostErrors[keyof ReallocateAgentAgentsAgentIdReallocatePostErrors];

export type ReallocateAgentAgentsAgentIdReallocatePostResponses = {
	/**
	 * Successful Response
	 */
	200: GetAgentResponse;
};

export type ReallocateAgentAgentsAgentIdReallocatePostResponse =
	ReallocateAgentAgentsAgentIdReallocatePostResponses[keyof ReallocateAgentAgentsAgentIdReallocatePostResponses];

export type GetDashboardStatsStatsDashboardGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/stats/dashboard";
};

export type GetDashboardStatsStatsDashboardGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetDashboardStatsStatsDashboardGetError =
	GetDashboardStatsStatsDashboardGetErrors[keyof GetDashboardStatsStatsDashboardGetErrors];

export type GetDashboardStatsStatsDashboardGetResponses = {
	/**
	 * Successful Response
	 */
	200: DashboardStats;
};

export type GetDashboardStatsStatsDashboardGetResponse =
	GetDashboardStatsStatsDashboardGetResponses[keyof GetDashboardStatsStatsDashboardGetResponses];

export type GetUsageStatsStatsUsageGetData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Start Date
		 * Start date in format YYYY-MM-DD
		 */
		start_date: string;
		/**
		 * End Date
		 * End date in format YYYY-MM-DD
		 */
		end_date: string;
	};
	url: "/stats/usage";
};

export type GetUsageStatsStatsUsageGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetUsageStatsStatsUsageGetError = GetUsageStatsStatsUsageGetErrors[keyof GetUsageStatsStatsUsageGetErrors];

export type GetUsageStatsStatsUsageGetResponses = {
	/**
	 * Successful Response
	 */
	200: UsageStats;
};

export type GetUsageStatsStatsUsageGetResponse =
	GetUsageStatsStatsUsageGetResponses[keyof GetUsageStatsStatsUsageGetResponses];

export type GetCreditsStatsStatsGlobalCreditsGetData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Start Date
		 * Start date in format YYYY-MM-DD
		 */
		start_date: string;
		/**
		 * End Date
		 * End date in format YYYY-MM-DD
		 */
		end_date: string;
	};
	url: "/stats/global/credits";
};

export type GetCreditsStatsStatsGlobalCreditsGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetCreditsStatsStatsGlobalCreditsGetError =
	GetCreditsStatsStatsGlobalCreditsGetErrors[keyof GetCreditsStatsStatsGlobalCreditsGetErrors];

export type GetCreditsStatsStatsGlobalCreditsGetResponses = {
	/**
	 * Successful Response
	 */
	200: GlobalCreditsStats;
};

export type GetCreditsStatsStatsGlobalCreditsGetResponse =
	GetCreditsStatsStatsGlobalCreditsGetResponses[keyof GetCreditsStatsStatsGlobalCreditsGetResponses];

export type GetApiStatsStatsGlobalApiGetData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Start Date
		 * Start date in format YYYY-MM-DD
		 */
		start_date: string;
		/**
		 * End Date
		 * End date in format YYYY-MM-DD
		 */
		end_date: string;
	};
	url: "/stats/global/api";
};

export type GetApiStatsStatsGlobalApiGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetApiStatsStatsGlobalApiGetError =
	GetApiStatsStatsGlobalApiGetErrors[keyof GetApiStatsStatsGlobalApiGetErrors];

export type GetApiStatsStatsGlobalApiGetResponses = {
	/**
	 * Successful Response
	 */
	200: GlobalApiStats;
};

export type GetApiStatsStatsGlobalApiGetResponse =
	GetApiStatsStatsGlobalApiGetResponses[keyof GetApiStatsStatsGlobalApiGetResponses];

export type GetAgentStatsStatsGlobalAgentsGetData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Start Date
		 * Start date in format YYYY-MM-DD
		 */
		start_date: string;
		/**
		 * End Date
		 * End date in format YYYY-MM-DD
		 */
		end_date: string;
	};
	url: "/stats/global/agents";
};

export type GetAgentStatsStatsGlobalAgentsGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetAgentStatsStatsGlobalAgentsGetError =
	GetAgentStatsStatsGlobalAgentsGetErrors[keyof GetAgentStatsStatsGlobalAgentsGetErrors];

export type GetAgentStatsStatsGlobalAgentsGetResponses = {
	/**
	 * Successful Response
	 */
	200: GlobalAgentStats;
};

export type GetAgentStatsStatsGlobalAgentsGetResponse =
	GetAgentStatsStatsGlobalAgentsGetResponses[keyof GetAgentStatsStatsGlobalAgentsGetResponses];

export type GetTokensStatsStatsGlobalTokensGetData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Start Date
		 * Start date in format YYYY-MM-DD
		 */
		start_date: string;
		/**
		 * End Date
		 * End date in format YYYY-MM-DD
		 */
		end_date: string;
	};
	url: "/stats/global/tokens";
};

export type GetTokensStatsStatsGlobalTokensGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetTokensStatsStatsGlobalTokensGetError =
	GetTokensStatsStatsGlobalTokensGetErrors[keyof GetTokensStatsStatsGlobalTokensGetErrors];

export type GetTokensStatsStatsGlobalTokensGetResponses = {
	/**
	 * Successful Response
	 */
	200: GlobalTokensStats;
};

export type GetTokensStatsStatsGlobalTokensGetResponse =
	GetTokensStatsStatsGlobalTokensGetResponses[keyof GetTokensStatsStatsGlobalTokensGetResponses];

export type ClientOptions = {
	baseURL: "http://localhost:8000" | (string & {});
};
