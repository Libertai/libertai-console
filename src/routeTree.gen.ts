/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsageImport } from './routes/usage'
import { Route as TransactionsImport } from './routes/transactions'
import { Route as TopUpImport } from './routes/top-up'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ApiKeysImport } from './routes/api-keys'
import { Route as AgentsImport } from './routes/agents'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UsageRoute = UsageImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => rootRoute,
} as any)

const TransactionsRoute = TransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => rootRoute,
} as any)

const TopUpRoute = TopUpImport.update({
  id: '/top-up',
  path: '/top-up',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ApiKeysRoute = ApiKeysImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => rootRoute,
} as any)

const AgentsRoute = AgentsImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsImport
      parentRoute: typeof rootRoute
    }
    '/api-keys': {
      id: '/api-keys'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof ApiKeysImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/top-up': {
      id: '/top-up'
      path: '/top-up'
      fullPath: '/top-up'
      preLoaderRoute: typeof TopUpImport
      parentRoute: typeof rootRoute
    }
    '/transactions': {
      id: '/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsImport
      parentRoute: typeof rootRoute
    }
    '/usage': {
      id: '/usage'
      path: '/usage'
      fullPath: '/usage'
      preLoaderRoute: typeof UsageImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/api-keys': typeof ApiKeysRoute
  '/dashboard': typeof DashboardRoute
  '/top-up': typeof TopUpRoute
  '/transactions': typeof TransactionsRoute
  '/usage': typeof UsageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/api-keys': typeof ApiKeysRoute
  '/dashboard': typeof DashboardRoute
  '/top-up': typeof TopUpRoute
  '/transactions': typeof TransactionsRoute
  '/usage': typeof UsageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/api-keys': typeof ApiKeysRoute
  '/dashboard': typeof DashboardRoute
  '/top-up': typeof TopUpRoute
  '/transactions': typeof TransactionsRoute
  '/usage': typeof UsageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents'
    | '/api-keys'
    | '/dashboard'
    | '/top-up'
    | '/transactions'
    | '/usage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/agents'
    | '/api-keys'
    | '/dashboard'
    | '/top-up'
    | '/transactions'
    | '/usage'
  id:
    | '__root__'
    | '/'
    | '/agents'
    | '/api-keys'
    | '/dashboard'
    | '/top-up'
    | '/transactions'
    | '/usage'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRoute: typeof AgentsRoute
  ApiKeysRoute: typeof ApiKeysRoute
  DashboardRoute: typeof DashboardRoute
  TopUpRoute: typeof TopUpRoute
  TransactionsRoute: typeof TransactionsRoute
  UsageRoute: typeof UsageRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRoute: AgentsRoute,
  ApiKeysRoute: ApiKeysRoute,
  DashboardRoute: DashboardRoute,
  TopUpRoute: TopUpRoute,
  TransactionsRoute: TransactionsRoute,
  UsageRoute: UsageRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/agents",
        "/api-keys",
        "/dashboard",
        "/top-up",
        "/transactions",
        "/usage"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/agents": {
      "filePath": "agents.tsx"
    },
    "/api-keys": {
      "filePath": "api-keys.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/top-up": {
      "filePath": "top-up.tsx"
    },
    "/transactions": {
      "filePath": "transactions.tsx"
    },
    "/usage": {
      "filePath": "usage.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
